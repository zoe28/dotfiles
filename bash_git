# Git aliases
# --------------------------------------------------------------------
alias cm="rg '>>>>>>> '"
alias ga="git add -p"
alias gaa="git add ."
alias gam="git commit --amend"
alias gau="git add $(git diff --name-only --diff-filter=U --relative)"
alias gbc="echo Total branches: `git branch | wc -l`"
alias gbu='git branch -u origin/"$(git rev-parse --abbrev-ref HEAD)" "$(git rev-parse --abbrev-ref HEAD)"'
alias gd="clear ; git diff"
alias gds="git diff --staged"
alias gdw="clear ; git diff --color-words"
alias gf="git fetch"
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
alias gld="git log master.. --oneline"
alias glt="git log --no-walk --tags --pretty='%h %d %s' --decorate=full"
alias gm="git mergetool"
alias gmm="git merge master"
alias go="git checkout"
alias gom="git checkout master && git fetch && git pull"
alias gpl="git pull"
alias gps="git push"
alias gs="git status -sb"
alias gso="git diff --name-status origin/master"
alias gsu="git diff --name-only --diff-filter=U --relative"
alias gv="git vimdiff"
alias reset="git stash"
alias stash="git add . ; git stash"
alias throwaway="git stash"
alias vrm="vim README.md"

# Wrap git automatically by adding the following to ~/.bash_profile:
eval "$(hub alias -s)"



# Git functions
# --------------------------------------------------------------------


# fetch origin branch
fo() {
  git fetch origin
  git fetch origin "+$1:origin/$1"
  git checkout "$1"
  git pull
  git branch -u origin/"$1" "$1"
}


# fshow - git commit browser
fshow() {
  local out sha q
  while out=$(
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" --print-query); do
    q=$(head -1 <<< "$out")
    while read sha; do
      git show --color=always $sha | less -R
    done < <(sed '1d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
  done
}


# ftags - search ctags
ftags() {
  local line
  [ -e tags ] &&
  line=$(
    awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
    cut -c1-80 | fzf --nth=1,2
  ) && ${EDITOR:-vim} $(cut -f3 <<< "$line") -c "set nocst" \
                                      -c "silent tag $(cut -f2 <<< "$line")"
}


gb() {
  git checkout $(git branch | fzf-tmux -d 15)
}


# double-check that you really want to commit to master
gc() {
  clear
  BRANCH_NAME=`git symbolic-ref --short HEAD`
  if [ "$BRANCH_NAME" = "master" ] ; then
    read -p "Are you sure you want to commit to master? [y/n] " -n 1 CONFIRM
    echo ""
    if [ "$CONFIRM" = "y" ] ; then
      git add -p ; git commit
    fi
  else
    git add -p ; git commit
  fi
}


# remove old branches that have already been merged into master
gclean() {
  DATE=`date -d '30 days ago' +%m-%d-%Y` # default date is 1 month ago
  DRY_RUN=""
  CURRENT_BRANCH=`git symbolic-ref --short HEAD`
  BRANCHES=0

  while [[ $# > 0 ]]
  do
  KEY="$1"

  case $KEY in
    # user can pass in a date
    -d|--date)
    DATE="$2"
    ;;
    # show what gets deleted
    --dry|--dry-run)
    DRY_RUN=1
    ;;
  esac
  shift
  done

  for BRANCH in $(git branch --merged | grep -v $CURRENT_BRANCH) ; do
    if [[ "$(git log $BRANCH --since $DATE | wc -l)" -eq 0 ]] ; then
      echo "$BRANCH"
      ((BRANCHES++))
    fi
  done

  if [[ -z "$DRY_RUN" ]] ; then
    echo -e "\n$BRANCHES merged branches stale since $DATE"
    if [[ $BRANCHES -gt 0 ]] ; then
      read -p "Do you want to delete all older merged branches? [y/n] " -n 1 CONFIRM
      echo ""
      if [ "$CONFIRM" = "y" ] ; then
        for BRANCH in $(git branch --merged | grep -v $CURRENT_BRANCH) ; do
          if [[ "$(git log $BRANCH --since $DATE | wc -l)" -eq 0 ]] ; then
            git branch -D $BRANCH
          fi
        done
      fi
    fi
  fi
}


# git diff origin
gdo() {
  BRANCH_NAME=`git symbolic-ref --short HEAD`
  git diff origin/$BRANCH_NAME
}


# check out the branch matching the parameter
gob() {
  local branches branch
  branches=$(git branch) &&
  branch=$(echo "$branches" | fzf-tmux -d 15 +m) &&
  git checkout $(echo "$branch" | sed "s/.* //")
}


# pull master and merge into current branch
gomm() {
  git fetch
  got merge origin/master
}


# show details of last commit
gq() {
  git show :/$1
}


# check for merge conflicts before continuing
grc() {
  CONFLICT=`rg ">>>>>>> "`
  if [ -z "$CONFLICT" ] ; then
    git add . ; git rebase --continue
  else
    echo "$CONFLICT"
    read -p "There are still merge conflicts. Do you want to merge? [y/n] " -n 1 CONFIRM
    echo ""
    if [ "$CONFIRM" = "y" ] ; then
      git add . ; git rebase --continue
    fi
  fi
}


# open a PR
pr() {
  BRANCH="$(git symbolic-ref HEAD)";
  BRANCH="${BRANCH#refs/heads/}";
  git push -u origin "$BRANCH";
  URL="$(git remote get-url origin)";
  HTTP_URL=${URL/:/\/}
  open "https://$HTTP_URL/compare/$BRANCH?expand=1"
}


squash() {
  git rebase -i HEAD~$1
}
alias sq='squash'
alias sq2='squash 2'
alias sq3='squash 3'
